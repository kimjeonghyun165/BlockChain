{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jh\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './navbar';\nimport Navbar from './navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/contracts/Tether.json';\nimport RWD from '../truffle_abis/contracts/RWD.json';\nimport DecentralBank from '../truffle_abis/contracts/DecentralBank.json';\nimport Main from './Main';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                // 윈도우에서 wev3가 감지되면 currentProvider로 새 weㅠ3 인스턴스를 생성\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } // 둘중 하나라도 충족x일시 경고창 출력    \n                else {\n                    window.alert('Error: check your metamask');\n                  }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                }); // 연결된 지갑주소 가져오기.\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //현재 연결된 네트웤 id 가져오기\n                //네트워크 불러온 후 테터 컨트렉 불러오기.\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log(tetherBalance, 'tether balance');\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('Error! Tether contract not deployed -no detected network');\n\n              case 20:\n                // RWD 컨트렉 불러오기\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                console.log(rwdBalance, 'RWD balance');\n                _context3.next = 32;\n                break;\n\n              case 31:\n                window.alert('Error! RWD contract not deployed -no detected network');\n\n              case 32:\n                // decentralBankData 컨트렉 불러오기\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 43;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 38;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 38:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalace: stakingBalance.toString()\n                });\n                console.log(stakingBalance, 'stakingbalance');\n                _context3.next = 44;\n                break;\n\n              case 43:\n                window.alert('Error! decentralBankData contract not deployed -no detected network');\n\n              case 44:\n                this.setState({\n                  loading: false\n                });\n\n              case 45:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: 'Connect',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalace: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            magin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }\n        }, \"LOADING PLEASE...\") : content = /*#__PURE__*/React.createElement(Main, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jh/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","console","log","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","stakingBalace","loading","props","content","magin","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport './navbar'\r\nimport Navbar from './navbar'\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/contracts/Tether.json'\r\nimport RWD from '../truffle_abis/contracts/RWD.json'\r\nimport DecentralBank from '../truffle_abis/contracts/DecentralBank.json'\r\nimport Main from './Main'\r\n\r\nclass App extends Component {\r\n\r\n    async UNSAFE_componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n\r\n    async loadWeb3() {\r\n        // 윈도우에서 이더리움이 감지되면 window.ethereum이 활성화될때까지 대기\r\n        if(window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        }\r\n        // 윈도우에서 wev3가 감지되면 currentProvider로 새 weㅠ3 인스턴스를 생성\r\n        else if (window.web3)\r\n            {\r\n                window.web3 = new Web3(window.web3.currentProvider)\r\n            } \r\n        // 둘중 하나라도 충족x일시 경고창 출력    \r\n        else {\r\n            window.alert('Error: check your metamask')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const account = await web3.eth.getAccounts()\r\n        this.setState({account: account[0]})  // 연결된 지갑주소 가져오기.\r\n        const networkId = await web3.eth.net.getId() //현재 연결된 네트웤 id 가져오기\r\n        \r\n\r\n        //네트워크 불러온 후 테터 컨트렉 불러오기.\r\n        const tetherData = Tether.networks[networkId]\r\n        if(tetherData) {\r\n            const tether =new web3.eth.Contract(Tether.abi, tetherData.address)\r\n            this.setState({tether})\r\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\r\n            this.setState({tetherBalance: tetherBalance.toString()})\r\n            console.log(tetherBalance, 'tether balance')\r\n        } else {\r\n            window.alert('Error! Tether contract not deployed -no detected network')\r\n        }\r\n\r\n        // RWD 컨트렉 불러오기\r\n        const rwdData = RWD.networks[networkId]\r\n        if(rwdData) {\r\n            const rwd =new web3.eth.Contract(RWD.abi, rwdData.address) \r\n            this.setState({rwd})\r\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n            this.setState({rwdBalance: rwdBalance.toString()})\r\n            console.log(rwdBalance, 'RWD balance')\r\n        } else {\r\n            window.alert('Error! RWD contract not deployed -no detected network')\r\n        }\r\n\r\n        // decentralBankData 컨트렉 불러오기\r\n        const decentralBankData = DecentralBank.networks[networkId]\r\n        if(decentralBankData) {\r\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n            this.setState({decentralBank})\r\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n            this.setState({stakingBalace: stakingBalance.toString()})\r\n            console.log(stakingBalance, 'stakingbalance')\r\n        } \r\n        else {\r\n            window.alert('Error! decentralBankData contract not deployed -no detected network')\r\n        }\r\n\r\n        this.setState({loading: false})\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account : 'Connect',\r\n            tether : {},\r\n            rwd : {},\r\n            decentralBank : {},\r\n            tetherBalance : '0',\r\n            rwdBalance : '0',\r\n            stakingBalace : '0',\r\n            loading : true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let content\r\n        {this.state.loading ?\r\n        content = <p id='loader' className='text-center' style={{magin:'30px'}}>LOADING PLEASE...</p> \r\n        : content = <Main />}\r\n        return (\r\n            <div>\r\n                <Navbar account={this.state.account} />\r\n                <div className='container-fluid mt-5'>\r\n                    <div className='row'>\r\n                        <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth: '600px', minHeight: '100vm'}}>\r\n                            <div>\r\n                                 {content}\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}